[{"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/index.js":"1","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/reportWebVitals.js":"2","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/App.js":"3","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Login.js":"4","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Register.js":"5","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Read.js":"6","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Home.js":"7","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Profile.js":"8","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/ReadWrittenWork.js":"9","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Resetpassword.js":"10","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/EditWrittenwork.js":"11","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/CreateWrittenwork.js":"12","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/Nav.js":"13","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/Error.js":"14","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/Messages.js":"15","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/CardAuthor.js":"16","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/Card.js":"17","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/NotLoggedIn.js":"18","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/LoggedIn.js":"19"},{"size":571,"mtime":1607909577597,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1607142119077,"results":"22","hashOfConfig":"21"},{"size":2130,"mtime":1607641506218,"results":"23","hashOfConfig":"21"},{"size":3535,"mtime":1607820781834,"results":"24","hashOfConfig":"21"},{"size":3360,"mtime":1607207232908,"results":"25","hashOfConfig":"21"},{"size":6853,"mtime":1607808760107,"results":"26","hashOfConfig":"21"},{"size":2048,"mtime":1607901982845,"results":"27","hashOfConfig":"21"},{"size":4680,"mtime":1607820597480,"results":"28","hashOfConfig":"21"},{"size":8186,"mtime":1607612237225,"results":"29","hashOfConfig":"21"},{"size":2128,"mtime":1607820826844,"results":"30","hashOfConfig":"21"},{"size":9334,"mtime":1607906941585,"results":"31","hashOfConfig":"21"},{"size":7615,"mtime":1607820618796,"results":"32","hashOfConfig":"21"},{"size":698,"mtime":1607384811862,"results":"33","hashOfConfig":"21"},{"size":165,"mtime":1607178307441,"results":"34","hashOfConfig":"21"},{"size":178,"mtime":1607190184044,"results":"35","hashOfConfig":"21"},{"size":3811,"mtime":1607820648272,"results":"36","hashOfConfig":"21"},{"size":1337,"mtime":1607541427858,"results":"37","hashOfConfig":"21"},{"size":628,"mtime":1607204091016,"results":"38","hashOfConfig":"21"},{"size":852,"mtime":1607281988724,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"nde60y",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/index.js",[],["86","87"],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/reportWebVitals.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/App.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Login.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Register.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Read.js",["88","89"],"import React, { useState, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport Card from '../components/Card';\nimport arrow from '../images/arrow.svg'\nimport cross from '../images/cross.svg'\nfunction Read({ isLoggedIn }) {\n    const [isGenreOpen, setIsGenreOpen] = useState(false);\n    const [isWorkOpen, setIsWorkOpen] = useState(false);\n    const [writtenWorkData, setWrittenWorkData] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState([]);\n    const [selectedWrittenwork, setSelectedWrittenwork] = useState([]);\n    const [query, setQuery] = useState(`api/v1/writtenWork`);\n    useEffect(() => {\n        readWrittenWorkHandler();\n    }, [query])\n    const readWrittenWorkHandler = async () => {\n        try {\n            const response = await fetch(query)\n            const data = await response.json();\n            setWrittenWorkData(data.data);\n        } catch (err) {\n            console.log(err)\n        }\n\n    }\n    const selectedGenreHandler = async (e) => {\n        let push = true;\n        selectedGenre.forEach(genre => {\n            if (genre === e.target.textContent) {\n                push = false;\n            }\n        })\n        if (push) {\n            selectedGenre.push(e.target.textContent)\n            setSelectedGenre(selectedGenre)\n            if (!selectedWrittenwork.length) {\n                setQuery(`api/v1/writtenWork?genre[in]=${selectedGenre}`);\n            }\n            else {\n                setQuery(`api/v1/writtenWork?genre[in]=${selectedGenre}&workType[in]=${selectedWrittenwork}`)\n            }\n        }\n    }\n    const selectedWrittenworkHandler = async (e) => {\n        let push = true;\n        selectedWrittenwork.forEach(workType => {\n            if (workType === e.target.textContent) {\n                push = false;\n            }\n        })\n        if (push) {\n            selectedWrittenwork.push(e.target.textContent)\n            setSelectedWrittenwork(selectedWrittenwork)\n        }\n        if (!selectedGenre.length) {\n            setQuery(`api/v1/writtenWork?workType[in]=${selectedWrittenwork}`);\n        }\n        else {\n            setQuery(`api/v1/writtenWork?genre[in]=${selectedGenre}&workType[in]=${selectedWrittenwork}`)\n        }\n    }\n    const removeWrittenWorkHandler = (idx) => {\n        let newSelectedWritten = selectedWrittenwork.filter((workType, id) => id !== idx);\n        setSelectedWrittenwork(newSelectedWritten);\n        updateQuery(newSelectedWritten, selectedGenre);\n    }\n    const removeGenreHandler = (e) => {\n        let newSelectedGenre = selectedGenre.filter(genre => genre !== e.target.textContent.trim());\n        setSelectedGenre(newSelectedGenre);\n        updateQuery(selectedWrittenwork, newSelectedGenre);\n    }\n    function updateQuery(selectedTagList, selectedGenreList) {\n        if (!selectedGenreList.length && !selectedTagList.length) {\n            setQuery(`api/v1/writtenWork`);\n        }\n        else if (!selectedGenreList.length && selectedTagList.length > 0) {\n            setQuery(`api/v1/writtenWork?workType[in]=${selectedTagList}`)\n        }\n        else if (!selectedTagList.length && selectedGenreList.length > 0) {\n            setQuery(`api/v1/writtenWork?genre[in]=${selectedGenreList}`);\n        }\n        else {\n            setQuery(`api/v1/writtenWork?genre[in]=${selectedGenreList}&workType[in]=${selectedTagList}`)\n        }\n    }\n    return (\n        <div>\n            <div className=\"header\">\n                <div className=\"section\">\n                    <div className=\"tagsArea\">\n                        {selectedWrittenwork.map((workType, idx) => <div key={workType} onClick={() => removeWrittenWorkHandler(idx)} className=\"tags\">{workType} <img src={cross} alt=\"Cancel\" /> </div>)}\n                        {selectedGenre.map(genre => <div key={genre} onClick={removeGenreHandler} className=\"tags\">{genre} <img src={cross} alt=\"Cancel\" /> </div>)}\n                    </div>\n                </div>\n                <div className=\"section\">\n                    <div className=\"dropdown\">\n                        <div className=\"title\" onClick={() => {\n                            setIsGenreOpen(!isGenreOpen);\n                            setIsWorkOpen(false)\n                        }}>Genre\n                        <img src={arrow} alt=\"arrow\" className={isGenreOpen ? \"rotateDown\" : \"\"} />\n                        </div>\n                        <ul onClick={selectedGenreHandler} className={`options ${isGenreOpen ? \"expand\" : \"\"}`}>\n                            <li>Fantasy</li>\n                            <li>Adventure</li>\n                            <li>Romance</li>\n                            <li>Contemporary</li>\n                            <li>Dystopian</li>\n                            <li>Mystery</li>\n                            <li>Horror</li>\n                            <li>Thriller</li>\n                            <li>Paranormal</li>\n                            <li>Historical fiction</li>\n                            <li>Science Fiction</li>\n                            <li>Memoir</li>\n                            <li>Self-help / Personal</li>\n                            <li>Motivational</li>\n                            <li>Guide / How-to</li>\n                            <li>Humor</li>\n                            <li>Children’s</li>\n                            <li>Other</li>\n\n                        </ul>\n                    </div>\n                    <div className=\"dropdown\">\n                        <div className=\"title\" onClick={() => {\n                            setIsWorkOpen(!isWorkOpen);\n                            setIsGenreOpen(false);\n                        }}>Work Type\n                        <img src={arrow} alt=\"arrow\" className={isWorkOpen ? \"rotateDown\" : \"\"} />\n                        </div>\n                        <ul onClick={selectedWrittenworkHandler} className={`options ${isWorkOpen ? \"expand\" : \"\"}`}>\n                            <li>Poetry</li>\n                            <li>Short Story</li>\n                            <li>Novel</li>\n                            <li>Journal/Diary</li>\n                            <li>Quotes</li>\n                        </ul>\n                    </div>\n\n                </div>\n            </div>\n            <div className=\"cardsSection\">\n                {\n                    writtenWorkData.map(writtenWork => { return <Card key={writtenWork._id} id={writtenWork._id} name={writtenWork.name} author={`${writtenWork.author.firstName} ${writtenWork.author.lastName}`} photo={writtenWork.photo} description={writtenWork.description} workType={writtenWork.workType} genre={writtenWork.genre} nsfw={writtenWork.nsfwContent} violence={writtenWork.violence} triggerWarning={writtenWork.suicideOrTriggerWarning} /> })\n                }\n            </div>\n        </div >\n    )\n}\n\nexport default Read","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Home.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Profile.js",["90","91","92","93"],"import React, { useEffect, useState, useRef } from 'react'\nimport { Redirect, Link } from 'react-router-dom'\nimport authorImage from '../images/profilePlaceholder.svg'\nimport Card from '../components/CardAuthor';\nimport add from '../images/plus.svg';\n\nfunction Profile({ isLoggedIn }) {\n    const [query, setQuery] = 'api/v1/auth/me';\n    const [profileData, setProfileData] = useState([]);\n    const [editAddress, setEditAddress] = useState();\n    const [addressFields, setAddressFields] = useState(false);\n    const [profileLocation, setProfileLocation] = useState({});\n    const [rerender, setRerender] = useState(false);\n\n    let addressLine = \"\";\n    let addressCountry = \"\";\n    let addressCity = \"\";\n    let addressZipcode = \"\";\n    useEffect(() => {\n        getMyProfileHandler()\n    }, [query, rerender])\n    const getMyProfileHandler = async () => {\n        try {\n            const response = await fetch(\"api/v1/auth/me\")\n            const data = await response.json();\n            setProfileData(data.data);\n            if (data.data.location) {\n                setProfileLocation(data.data.location)\n            }\n\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    const addAddressHandler = async () => {\n        try {\n            const response = await fetch(`/api/v1/auth/me`, {\n                method: \"PUT\",\n                body: JSON.stringify({\n                    address: `${addressLine} ${addressCity} ${addressCountry} ${addressZipcode}`.trim()\n                }),\n                headers: {\n                    \"Content-type\": \"application/json; charset=UTF-8\"\n                }\n            })\n            const data = await response.json();\n            if (data.data.location) {\n                setProfileLocation(data.data.location)\n            }\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    return (\n\n        <>\n            {\n                profileData.writtenworks &&\n                <div className=\"profilePage\">\n                    {!isLoggedIn ? <Redirect to=\"/login\" /> : \"\"}\n                    <div className=\"header\">\n                        <div className=\"section\">\n                            <div>\n                                <img src={authorImage} alt=\"Profile Icon\" />\n                            </div>\n                            <div>\n                                <h1>{profileData.firstName} {profileData.lastName}</h1>\n                                <div className=\"hoverBlendWhiteButton\">{profileLocation.formattedAddress ?\n                                    <div> {profileLocation.formattedAddress}</div> :\n                                    addressFields ?\n                                        <div className=\"addAddressArea\">\n                                            <input type=\"text\" name=\"text\" placeholder=\"Address\" onChange={(e) => { addressLine = e.target.value }} />\n                                            <input type=\"text\" name=\"text\" placeholder=\"City\" onChange={(e) => { addressCity = e.target.value }} />\n                                            <input type=\"text\" name=\"text\" placeholder=\"Country\" onChange={(e) => { addressCountry = e.target.value }} />\n                                            <input type=\"text\" name=\"text\" placeholder=\"Zipcode\" onChange={(e) => { addressZipcode = e.target.value }} />\n                                            <div onClick={addAddressHandler} className=\"button\">Add</div>\n                                        </div> :\n                                        <div onClick={() => { setAddressFields(true) }}><img src={add} alt=\"Plus\" /> Add Address</div>}</div>\n\n                            </div>\n                        </div>\n                        <div className=\"section\">\n                            {/* <div className=\"button\">Find Authors Near Me</div> */}\n                            <Link to=\"/createWrittenWork\"><div className=\"button\">+ New Written Work</div></Link>\n                        </div>\n                    </div>\n                    <div className=\"cardsSection\">\n                        {profileData.writtenworks.map(writtenWork => { return <Card key={writtenWork._id} id={writtenWork._id} rerender={rerender} setRerender={setRerender} rating={writtenWork.averageRating} view={writtenWork.view} name={writtenWork.name} photo={writtenWork.photo} description={writtenWork.description} workType={writtenWork.workType} genre={writtenWork.genre} nsfw={writtenWork.nsfwContent} violence={writtenWork.violence} triggerWarning={writtenWork.suicideOrTriggerWarning} /> })}\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Profile\n","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/ReadWrittenWork.js",["94"],"import React, { useEffect, useState, useRef } from 'react'\nimport { useParams } from 'react-router';\nimport profilePlaceholder from '../images/profilePlaceholder.svg';\nimport expand from '../images/expand.svg';\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport emptyStar from '../images/empty_star.svg';\nimport filledStar from '../images/filled_star.svg';\nimport about from '../images/about.svg';\nimport Error from '../components/Error';\nimport { useHistory } from 'react-router-dom'\n\n\nfunction ReadWrittenWork({ isLoggedIn }) {\n    const { id } = useParams();\n    const history = useHistory()\n\n    const [writtenWorkData, setWrittenWorkData] = useState([]);\n    const [query, setQuery] = useState(`/api/v1/writtenWork/${id}`);\n    const [userRating, setUserRating] = useState([0, 0, 0, 0, 0]);\n    const [errors, setErrors] = useState(\"\");\n\n    const handle = useFullScreenHandle();\n    useEffect(() => {\n        loadWrittenWork();\n    }, [query])\n    const commentRef = useRef();\n    const loadWrittenWork = async () => {\n        try {\n            const response = await fetch(query)\n            const data = await response.json();\n            setWrittenWorkData(data.data);\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    const submitCommentHandler = async () => {\n        if (isLoggedIn) {\n            if (commentRef.current.value.length) {\n                try {\n                    const response = await fetch(`/api/v1/writtenWork/${id}/comments`, {\n                        method: \"POST\",\n                        body: JSON.stringify({\n                            comment: commentRef.current.value\n                        }),\n                        headers: {\n                            \"Content-type\": \"application/json; charset=UTF-8\"\n                        }\n                    })\n                    const data = await response.json();\n                    setErrors(\"\");\n                    if (data.success) {\n                        setQuery(query)\n                    }\n                    else {\n                        setErrors(data.error)\n                    }\n\n                } catch (err) {\n                    setErrors(err)\n                }\n            }\n            else {\n                setErrors(\"Comments can't be empty\")\n            }\n            commentRef.current.value = \"\"\n        }\n        else {\n            history.push(\"/login\");\n        }\n    }\n    const submitReviewHandler = async (rating) => {\n        if (isLoggedIn) {\n            try {\n                const response = await fetch(`/api/v1/writtenWork/${id}/comments`, {\n                    method: \"POST\",\n                    body: JSON.stringify({\n                        rating: rating\n                    }),\n                    headers: {\n                        \"Content-type\": \"application/json; charset=UTF-8\"\n                    }\n                })\n                const data = await response.json();\n                if (data.success) {\n                    // setQuery(`/api/v1/writtenWork/${}`)\n                }\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            history.push(\"/login\");\n        }\n    }\n    const mouseOverStar = (index) => {\n        for (let i = 0; i < 5; i++) {\n            if (i <= index) {\n                userRating[i] = 1;\n            }\n            else {\n                userRating[i] = 0;\n            }\n        }\n        setUserRating(userRating)\n    }\n\n    const starRenderer = () => {\n        let ratingRenderer = [];\n        for (let i = 0; i < 5; i++) {\n            if (i < Math.round(parseInt(writtenWorkData.averageRating))) {\n                ratingRenderer.push(<img key={i} src={filledStar} alt=\"filled star\" />)\n            }\n            else {\n                ratingRenderer.push(<img key={i} src={emptyStar} alt=\"empty star\" />)\n            }\n        }\n        return ratingRenderer;\n    }\n    return (\n        <>\n            {\n                writtenWorkData.author && writtenWorkData.genre && writtenWorkData.comments && < div className=\"readWrittenWork\">\n                    <div className=\"readSection\">\n                        <div className=\"heading\">\n                            <h1>{writtenWorkData.name}</h1>\n                            <div className=\"options\">\n                                <div onClick={handle.enter} className=\"fullscreen\">\n                                    <img src={expand} alt=\"expand\" /> Fullscreen\n                                </div>\n                                <div onClick={handle.enter} className=\"fullscreen\">\n                                    <img src={about} alt=\"expand\" /> About\n                                </div>\n                            </div>\n                        </div>\n                        <FullScreen handle={handle} style={{ color: '#fff' }}>\n                            <textarea className=\"readArea\" readOnly>\n                                {writtenWorkData.content}\n                            </textarea>\n                        </FullScreen>\n                    </div>\n                    <div className=\"description\">\n                        <div className=\"padding\">\n                            <h1>{writtenWorkData.name}</h1>\n                            <h2>{writtenWorkData.author.firstName} {writtenWorkData.author.lastName}</h2>\n                            <div className=\"tagsArea\">\n                                <div className=\"tags\">{writtenWorkData.workType}</div>\n                                {writtenWorkData.genre.map(gen => <div key={gen} className=\"tags\">{gen}</div>)}\n                            </div>\n                            <p>{writtenWorkData.description} </p>\n                            <div className=\"rating\">\n                                <div className=\"stars\">\n                                    {starRenderer()}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"comments\">\n\n                            <div className=\"padding\">\n                                <h1>Comments</h1>\n                                {writtenWorkData.comments.map(comment => {\n                                    if (comment.comment) {\n                                        return <div key={comment._id} className=\"comment\">\n                                            <div className=\"commentName\">\n                                                <img src={profilePlaceholder} alt=\"Profile\" />\n                                                {comment.user.firstName} {comment.user.lastName}\n                                            </div>\n                                            <div className=\"commentDesc\">\n                                                {comment.comment}\n                                            </div>\n                                        </div>\n                                    }\n                                    return \"\";\n                                }\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"userInputSection\">\n                            <Error error={errors} />\n                            <div className=\"borderInput\">\n                                <input type=\"text\" placeholder=\"Leave A Comment\" ref={commentRef} />\n                                <div onClick={submitCommentHandler}>Post</div>\n                            </div>\n\n                            <div className=\"inputRating\">\n                                <span>Leave A Rating:</span>\n\n                                {userRating.map((rating, i) =>\n                                    <img onClick={() => submitReviewHandler(i + 1)}\n                                        onMouseOver={() => mouseOverStar(i)} key={i} src={rating ? filledStar : emptyStar}\n                                        alt=\"empty star\" />)\n                                }\n                            </div>\n                        </div>\n\n                    </div>\n                </div>}\n        </>\n    )\n}\n\n\nexport default ReadWrittenWork\n","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/Resetpassword.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/EditWrittenwork.js",["95","96","97","98","99","100","101"],"import React, { useEffect, useState, useRef } from 'react'\nimport { useParams } from 'react-router';\nimport { Redirect } from 'react-router-dom'\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport expand from '../images/expand.svg';\nimport about from '../images/about.svg';\nimport speech from '../images/speech.svg';\nimport emptyStar from '../images/empty_star.svg';\nimport filledStar from '../images/filled_star.svg';\nimport profilePlaceholder from '../images/profilePlaceholder.svg';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\nfunction EditWrittenwork({ isLoggedIn }) {\n    const { id } = useParams();\n    const [query, setQuery] = useState(`/api/v1/writtenWork/${id}`);\n    const [writtenWorkData, setWrittenWorkData] = useState([]);\n    const [isDescFocus, setIsDescFocus] = useState(false);\n    const [isListening, setIsListening] = useState(false);\n    const [rerender, setRerender] = useState(false);\n    const [lastText, setLastText] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    const [lastDescText, setLastDescText] = useState(\"\");\n    const [descText, setDescText] = useState(\"\");\n    const textRef = useRef();\n    const descRef = useRef();\n    useEffect(() => {\n        const timer = setTimeout(async () => {\n            if (lastText != text) {\n                try {\n                    await fetch(`/api/v1/writtenWork/${id}`, {\n                        method: \"PUT\",\n                        body: JSON.stringify({\n                            content: text\n                        }),\n                        headers: {\n                            \"Content-type\": \"application/json; charset=UTF-8\"\n                        }\n                    })\n                } catch (err) {\n                    console.log(err)\n                }\n                setLastText(text);\n            }\n        }, 3000)\n        return () => clearTimeout(timer);\n    }, [text])\n    useEffect(() => {\n        const timerForDesc = setTimeout(async () => {\n            if (lastDescText != descText) {\n                try {\n                    await fetch(`/api/v1/writtenWork/${id}`, {\n                        method: \"PUT\",\n                        body: JSON.stringify({\n                            description: descText\n                        }),\n                        headers: {\n                            \"Content-type\": \"application/json; charset=UTF-8\"\n                        }\n                    })\n                } catch (err) {\n                    console.log(err)\n                }\n                setLastDescText(descText);\n            }\n        }, 3000)\n        return () => clearTimeout(timerForDesc);\n    }, [descText])\n    const { transcript, resetTranscript } = useSpeechRecognition()\n    const handle = useFullScreenHandle();\n    // function logger() {\n    //     console.log(\"timer\")\n    //     setTimeout(logger, 1000);\n    // }\n    const speechHandler = () => {\n        // window.setInterval(function () {\n        //     console.log(\"timer\")\n        // }, 5000);\n        setIsListening(!isListening);\n        // resetTranscript(); /\n        if (isListening) {\n            if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n                console.log(\"No support for browser\")\n            }\n            else {\n                SpeechRecognition.startListening({ continuous: true })\n            }\n        }\n        else {\n            SpeechRecognition.stopListening();\n            // SpeechRecognition.abortListening();\n            textRef.current.value = `${writtenWorkData.content} ${transcript}`;\n            setWrittenWorkData({ ...writtenWorkData, content: `${writtenWorkData.content} ${transcript}` });\n            setText(`${writtenWorkData.content} ${transcript}`);\n            resetTranscript();\n        }\n    }\n\n\n    useEffect(() => {\n        loadWrittenWork();\n    }, [query, rerender])\n    const loadWrittenWork = async () => {\n        try {\n            const response = await fetch(query)\n            const data = await response.json();\n            setWrittenWorkData(data.data);\n\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    const starRenderer = () => {\n        let ratingRenderer = [];\n        for (let i = 0; i < 5; i++) {\n            if (i < Math.round(parseInt(writtenWorkData.averageRating))) {\n                ratingRenderer.push(<img key={i} src={filledStar} alt=\"filled star\" />)\n            }\n            else {\n                ratingRenderer.push(<img key={i} src={emptyStar} alt=\"empty star\" />)\n            }\n        }\n        return ratingRenderer;\n    }\n    return (\n        <> {\n            writtenWorkData.author && writtenWorkData.genre && writtenWorkData.comments &&\n            <div className=\"readWrittenWork\">\n                {/* {console.log(writtenWorkData.content)} */}\n                {!isLoggedIn ? <Redirect to=\"/login\" /> : \"\"}\n                <div className=\"readSection\">\n                    <div className=\"heading\">\n                        <h1>{writtenWorkData.name}</h1>\n                        <div className=\"options\">\n                            <div className=\"fullscreen\" onClick={() => { speechHandler(); if (isListening) { resetTranscript(); } }}>\n                                <img src={speech} alt=\"Speech\" /> Start Dictation\n                            </div>\n                            <div onClick={handle.enter} className=\"fullscreen\">\n                                <img src={expand} alt=\"Expand\" /> Fullscreen\n                            </div>\n                            <div className=\"fullscreen\">\n                                <img src={about} alt=\"About\" /> About\n                            </div>\n                        </div>\n                    </div>\n                    <FullScreen handle={handle} style={{ color: '#fff' }}>\n                        <textarea className=\"readArea\" ref={textRef} onChange={(e) => { setText(textRef.current.value) }} >\n                            {writtenWorkData.content}\n                        </textarea>\n                    </FullScreen>\n                </div>\n                <div className=\"description\">\n                    <div className=\"padding\">\n                        <h1>{writtenWorkData.name}</h1>\n                        <h2>{writtenWorkData.author.firstName} {writtenWorkData.author.lastName}</h2>\n                        <div className=\"tagsArea\">\n                            <div className=\"tags\">{writtenWorkData.workType}</div>\n                            {writtenWorkData.genre.map(gen => <div key={gen} className=\"tags\">{gen}</div>)}\n                        </div>\n                        <p>\n                            {/* <textarea  name=\"description\" id=\"description\" className={`descArea ${isDescFocus ? 'editting' : ''}`} ref={descRef} onChange={(e) => { setDescText(descRef.current.value) }} onBlur={() => { setIsDescFocus(false) }} onFocus={() => { setIsDescFocus(true) }}>\n                                {writtenWorkData.description}\n                            </textarea> */}\n                            <div\n                                contentEditable className={`descArea ${isDescFocus ? 'editting' : ''}`} ref={descRef} onInput={(e) => { setDescText(descRef.current.textContent) }} onBlur={() => { setIsDescFocus(false) }} onFocus={() => { setIsDescFocus(true) }}>\n                                {writtenWorkData.description}\n                            </div>\n                        </p>\n                        {writtenWorkData.view === \"public\" ? <div className=\"rating\">\n                            <div className=\"stars\">\n                                {starRenderer()}\n                            </div></div> : <div className=\"tagsArea\"> <div className=\"tags view-tag\">{writtenWorkData.view}</div> </div>}\n                    </div>\n\n                    <div className=\"comments\">\n\n                        <div className=\"padding\">\n                            <h1>Comments</h1>\n                            {writtenWorkData.view === \"public\" ?\n                                <> {\n                                    writtenWorkData.comments.map(comment => {\n                                        if (comment.comment) {\n                                            return <div key={comment._id} className=\"comment\">\n                                                <div className=\"commentName\">\n                                                    <img src={profilePlaceholder} alt=\"Profile\" />\n                                                    {comment.user.firstName} {comment.user.lastName}\n                                                </div>\n                                                <div className=\"commentDesc\">\n                                                    {comment.comment}\n                                                </div>\n                                            </div>\n                                        }\n                                        return \"\";\n                                    }\n                                    )\n                                }</>\n                                : <h2>No Comments For Private Written Works</h2>}\n                        </div>\n                    </div>\n\n                </div>\n            </div>}</>\n    )\n}\n\nexport default EditWrittenwork\n","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/pages/CreateWrittenwork.js",["102"],"import React, { useState, useRef } from 'react'\nimport Error from '../components/Error';\nimport { useHistory, Redirect } from 'react-router-dom';\n\nfunction CreateWrittenwork({ isLoggedIn }) {\n    const [isWorkOpen, setIsWorkOpen] = useState(false);\n    const [isGenreOpen, setIsGenreOpen] = useState(false);\n    const [view, setView] = useState(false);\n    const [errors, setErrors] = useState(\"\");\n    const name = useRef();\n    const description = useRef();\n    const workType = useRef();\n    const genre = useRef();\n    const visibility = useRef();\n    const nsfw = useRef();\n    const violence = useRef();\n    const triggerwarning = useRef();\n    const history = useHistory();\n\n    const selectedWrittenworkHandler = () => {\n        setIsWorkOpen(true)\n    }\n    const selectedGenreHandler = () => {\n        setIsGenreOpen(true)\n    }\n    const submitFormHandler = async (e) => {\n        e.preventDefault();\n        let genreArray = genre.current.value.split(',');\n        try {\n            const response = await fetch(\"/api/v1/writtenWork\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                    name: name.current.value,\n                    description: description.current.value,\n                    workType: workType.current.value,\n                    genre: genreArray,\n                    view,\n                    nsfwContent: nsfw.current.checked,\n                    violence: violence.current.checked,\n                    suicideOrTriggerWarning: triggerwarning.current.checked\n                }),\n                headers: {\n                    \"Content-type\": \"application/json; charset=UTF-8\"\n                }\n            })\n            const data = await response.json();\n            if (data.success) {\n                setErrors(\"\");\n                history.replace(`/editwrittenwork/${data.data._id}`)\n            } else {\n                setErrors(data.error);\n            }\n\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    return (\n        <div className=\"createPage\">\n            {!isLoggedIn ? <Redirect to=\"/login\" /> : \"\"}\n\n            <div className=\"whitebg\">\n                <div className=\"divider\">\n                    <Error error={errors} />\n                    <div className=\"searchInput\">\n                        <input type=\"text\" name=\"text\" required ref={name} />\n                        <label className=\"label-name\">\n                            <span className=\"content-name\">\n                                Name *\n                            </span>\n                        </label>\n                    </div>\n                    <div className=\"textarea\">\n                        <label className=\"label-name\"><span className=\"content-name\">\n                            Description*\n                            </span>\n                        </label>\n                        <textarea name=\"description\" id=\"description\" ref={description}>\n                        </textarea>\n                    </div>\n                    <div className=\"typeDropdown\">\n                        <div className=\"searchInput\">\n                            <input type=\"text\" name=\"text\" ref={workType} required onFocus={selectedWrittenworkHandler} onBlur={() => { setIsWorkOpen(false) }} />\n                            <label className=\"label-name\">\n                                <span className=\"content-name\">\n                                    Work Type *\n                            </span>\n                            </label>\n\n                        </div>\n                        <ul className={`options ${isWorkOpen ? \"expand\" : \"\"}`}>\n                            <li>Poetry</li>\n                            <li>Short Story</li>\n                            <li>Novel</li>\n                            <li>Journal/Diary</li>\n                            <li>Quotes</li>\n                        </ul>\n                    </div>\n                    <div className=\"typeDropdown\">\n                        <div className=\"searchInput\">\n                            <input type=\"text\" name=\"text\" required ref={genre} onFocus={selectedGenreHandler} onBlur={() => { setIsGenreOpen(false) }} />\n                            <label className=\"label-name\">\n                                <span className=\"content-name\">\n                                    Genre *\n                            </span>\n                            </label>\n                        </div>\n                        <ul className={`options ${isGenreOpen ? \"expand\" : \"\"}`}>\n                            <li>Fantasy</li>\n                            <li>Adventure</li>\n                            <li>Romance</li>\n                            <li>Contemporary</li>\n                            <li>Dystopian</li>\n                            <li>Mystery</li>\n                            <li>Horror</li>\n                            <li>Thriller</li>\n                            <li>Paranormal</li>\n                            <li>Historical fiction</li>\n                            <li>Science Fiction</li>\n                            <li>Memoir</li>\n                            <li>Self-help / Personal</li>\n                            <li>Motivational</li>\n                            <li>Guide / How-to</li>\n                            <li>Humor</li>\n                            <li>Children’s</li>\n                            <li>Other</li>\n\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"divider\">\n                    <div className=\"radio\">\n                        Visibility\n                        <div className=\"radio-options\">\n                            <label class=\"container\">Public\n                                <input type=\"radio\" name=\"visibility\" value=\"public\" onClick={() => { setView(\"public\") }} />\n                                <span class=\"checkmark\"></span>\n                            </label>\n                            <label class=\"container\">Private\n                                <input type=\"radio\" name=\"visibility\" value=\"private\" onClick={() => { setView(\"private\") }} />\n                                <span class=\"checkmark\"></span>\n                            </label>\n                        </div>\n                    </div>\n                    <h2>We just need some more information so that our readers can have the best experience :)</h2>\n\n                    <div class=\"checkbox-container\">\n                        <label class=\"container\">18 +\n                            <input type=\"checkbox\" name=\"nsfw\" value=\"nsfw\" ref={nsfw} />\n                            <span class=\"checkmark\"></span>\n                        </label>\n                    </div>\n                    <div class=\"checkbox-container\">\n                        <label class=\"container\">Violence\n                            <input type=\"checkbox\" name=\"violence\" value=\"violence\" ref={violence} />\n                            <span class=\"checkmark\"></span>\n                        </label>\n                    </div>\n                    <div class=\"checkbox-container\">\n                        <label class=\"container\">Suicide/Trigger Warning\n                            <input type=\"checkbox\" name=\"triggerwarning\" value=\"triggerwarning\" ref={triggerwarning} />\n                            <span class=\"checkmark\"></span>\n                        </label>\n                    </div>\n                    <div className=\"button\" onClick={submitFormHandler}>Create</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CreateWrittenwork\n","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/Nav.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/Error.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/Messages.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/CardAuthor.js",["103"],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport storyImage from '../images/placeholder_writtenwork.svg'\nimport emptyStar from '../images/empty_star.svg';\nimport filledStar from '../images/filled_star.svg';\nimport editIcon from '../images/edit.svg';\nimport deleteIcon from '../images/delete.svg'\n\nfunction CardAuthor({ name, id, rerender, setRerender, view, rating, description, workType, genre, triggerWarning, nsfw, violence }) {\n\n    const [isDeleteRequested, setIsDeleteRequested] = useState(false);\n    const deleteWrittenWorkHanlder = async () => {\n        try {\n            const response = await fetch(`/api/v1/writtenWork/${id}`, {\n                method: \"DELETE\"\n            })\n            const data = await response.json();\n            setRerender(!rerender)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    const starRenderer = () => {\n        let ratingRenderer = [];\n        for (let i = 0; i < 5; i++) {\n            if (i < Math.round(parseInt(rating))) {\n                ratingRenderer.push(<img key={i} src={filledStar} alt=\"filled star\" />)\n            }\n            else {\n                ratingRenderer.push(<img key={i} src={emptyStar} alt=\"empty star\" />)\n            }\n        }\n        return ratingRenderer;\n    }\n\n    return (\n        <>\n\n            {\n                <div className=\"cardLink\">\n                    <div className={`deleteOverlay ${isDeleteRequested ? 'showOpacity' : ''}`}>\n                        Are you sure you want to delete your written work - \"{name}\"?\n                        <div className=\"buttons\">\n                            <div className=\"button\" onClick={deleteWrittenWorkHanlder}>Yes</div>\n                            <div className=\"button\" onClick={() => { setIsDeleteRequested(false) }}>No</div>\n                        </div>\n                    </div>\n                    <div className=\"cardOverlay\">\n                        <Link to={`/editwrittenwork/${id}`}>\n                            <div className={`toolTip ${isDeleteRequested ? '' : 'showzindex'}`} tooltip={\"Edit Your Written Work\"} >\n                                <img src={editIcon} alt=\"Edit\" />\n                            </div>\n                        </Link>\n                        <div className={`toolTip ${isDeleteRequested ? '' : 'showzindex'}`} tooltip={\"Delete This Written Work\"} onClick={() => { setIsDeleteRequested(true) }}>\n                            <img src={deleteIcon} alt=\"Delete\" />\n                        </div>\n                    </div>\n                    <div className=\"cards\">\n                        <img src={storyImage} alt=\"Placeholder\" />\n                        <div className=\"cardText\">\n                            <h1>{name}</h1>\n                            {view === \"public\" ? <div className=\"rating\">\n                                <div className=\"stars\">\n                                    {starRenderer()}\n                                </div></div> : <div className=\"tagsArea\"> <div className=\"tags view-tag\">{view}</div> </div>}\n                            <p>{description}</p>\n                            <div className=\"tagsArea\">\n                                <div className=\"tags\">{workType}</div>\n                                {genre.map(gen => <div key={gen} className=\"tags\">{gen}</div>)}\n                                {triggerWarning ? <div className=\"warning-tag\">Trigger Warning</div> : ''}\n                                {nsfw ? <div className=\"warning-tag\">18+</div> : ''}\n                                {violence ? <div className=\"warning-tag\">Violence</div> : ''}\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default CardAuthor\n","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/Card.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/NotLoggedIn.js",[],["104","105"],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe/client/src/components/LoggedIn.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":18},{"ruleId":"114","severity":1,"message":"115","line":15,"column":8,"nodeType":"116","endLine":15,"endColumn":15,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"118","line":1,"column":38,"nodeType":"112","messageId":"113","endLine":1,"endColumn":44},{"ruleId":"110","severity":1,"message":"119","line":8,"column":19,"nodeType":"112","messageId":"113","endLine":8,"endColumn":27},{"ruleId":"110","severity":1,"message":"120","line":10,"column":12,"nodeType":"112","messageId":"113","endLine":10,"endColumn":23},{"ruleId":"110","severity":1,"message":"121","line":10,"column":25,"nodeType":"112","messageId":"113","endLine":10,"endColumn":39},{"ruleId":"114","severity":1,"message":"122","line":25,"column":8,"nodeType":"116","endLine":25,"endColumn":15,"suggestions":"123"},{"ruleId":"110","severity":1,"message":"119","line":15,"column":19,"nodeType":"112","messageId":"113","endLine":15,"endColumn":27},{"ruleId":"110","severity":1,"message":"124","line":19,"column":22,"nodeType":"112","messageId":"113","endLine":19,"endColumn":33},{"ruleId":"125","severity":1,"message":"126","line":28,"column":26,"nodeType":"127","messageId":"128","endLine":28,"endColumn":28},{"ruleId":"114","severity":1,"message":"129","line":46,"column":8,"nodeType":"116","endLine":46,"endColumn":14,"suggestions":"130"},{"ruleId":"125","severity":1,"message":"126","line":49,"column":30,"nodeType":"127","messageId":"128","endLine":49,"endColumn":32},{"ruleId":"114","severity":1,"message":"131","line":67,"column":8,"nodeType":"116","endLine":67,"endColumn":18,"suggestions":"132"},{"ruleId":"114","severity":1,"message":"122","line":101,"column":8,"nodeType":"116","endLine":101,"endColumn":25,"suggestions":"133"},{"ruleId":"110","severity":1,"message":"134","line":14,"column":11,"nodeType":"112","messageId":"113","endLine":14,"endColumn":21},{"ruleId":"110","severity":1,"message":"135","line":17,"column":19,"nodeType":"112","messageId":"113","endLine":17,"endColumn":23},{"ruleId":"106","replacedBy":"136"},{"ruleId":"108","replacedBy":"137"},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'readWrittenWorkHandler'. Either include it or remove the dependency array.","ArrayExpression",["140"],"'useRef' is defined but never used.","'setQuery' is assigned a value but never used.","'editAddress' is assigned a value but never used.","'setEditAddress' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadWrittenWork'. Either include it or remove the dependency array.",["141"],"'setRerender' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'id' and 'lastText'. Either include them or remove the dependency array.",["142"],"React Hook useEffect has missing dependencies: 'id' and 'lastDescText'. Either include them or remove the dependency array.",["143"],["144"],"'visibility' is assigned a value but never used.","'data' is assigned a value but never used.",["138"],["139"],"no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},"Update the dependencies array to be: [query, readWrittenWorkHandler]",{"range":"155","text":"156"},"Update the dependencies array to be: [loadWrittenWork, query]",{"range":"157","text":"158"},"Update the dependencies array to be: [id, lastText, text]",{"range":"159","text":"160"},"Update the dependencies array to be: [descText, id, lastDescText]",{"range":"161","text":"162"},"Update the dependencies array to be: [loadWrittenWork, query, rerender]",{"range":"163","text":"164"},[683,690],"[query, readWrittenWorkHandler]",[966,973],"[loadWrittenWork, query]",[1944,1950],"[id, lastText, text]",[2700,2710],"[descText, id, lastDescText]",[3885,3902],"[loadWrittenWork, query, rerender]"]