[{"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/index.js":"1","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/reportWebVitals.js":"2","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/App.js":"3","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/Error.js":"4","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/Nav.js":"5","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Register.js":"6","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Login.js":"7","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Read.js":"8","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Home.js":"9","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Resetpassword.js":"10","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/Messages.js":"11","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/LoggedIn.js":"12","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/NotLoggedIn.js":"13","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Profile.js":"14","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/Card.js":"15","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/ReadWrittenWork.js":"16","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/CardAuthor.js":"17","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/EditWrittenwork.js":"18","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/CreateWrittenwork.js":"19"},{"size":571,"mtime":1607148553674,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1607142119077,"results":"22","hashOfConfig":"21"},{"size":2130,"mtime":1607641506218,"results":"23","hashOfConfig":"21"},{"size":165,"mtime":1607178307441,"results":"24","hashOfConfig":"21"},{"size":698,"mtime":1607384811862,"results":"25","hashOfConfig":"21"},{"size":3360,"mtime":1607207232908,"results":"26","hashOfConfig":"21"},{"size":3605,"mtime":1607541301220,"results":"27","hashOfConfig":"21"},{"size":6910,"mtime":1607386063252,"results":"28","hashOfConfig":"21"},{"size":138,"mtime":1607148343954,"results":"29","hashOfConfig":"21"},{"size":2239,"mtime":1607207264367,"results":"30","hashOfConfig":"21"},{"size":178,"mtime":1607190184044,"results":"31","hashOfConfig":"21"},{"size":852,"mtime":1607281988724,"results":"32","hashOfConfig":"21"},{"size":628,"mtime":1607204091016,"results":"33","hashOfConfig":"21"},{"size":2750,"mtime":1607710687875,"results":"34","hashOfConfig":"21"},{"size":1337,"mtime":1607541427858,"results":"35","hashOfConfig":"21"},{"size":8186,"mtime":1607612237225,"results":"36","hashOfConfig":"21"},{"size":2736,"mtime":1607557918335,"results":"37","hashOfConfig":"21"},{"size":8597,"mtime":1607705806029,"results":"38","hashOfConfig":"21"},{"size":7491,"mtime":1607701640092,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"5x5l42",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/index.js",[],["81","82"],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/reportWebVitals.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/App.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/Error.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/Nav.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Register.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Login.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Read.js",["83"],"import React, { useState, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport Card from '../components/Card';\nimport arrow from '../images/arrow.svg'\nimport cross from '../images/cross.svg'\nfunction Read({ isLoggedIn }) {\n    const [isGenreOpen, setIsGenreOpen] = useState(false);\n    const [isWorkOpen, setIsWorkOpen] = useState(false);\n    const [writtenWorkData, setWrittenWorkData] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState([]);\n    const [selectedWrittenwork, setSelectedWrittenwork] = useState([]);\n    const [query, setQuery] = useState(`api/v1/writtenWork`);\n    useEffect(() => {\n        readWrittenWorkHandler();\n    }, [query])\n    const readWrittenWorkHandler = async () => {\n        try {\n            const response = await fetch(query)\n            const data = await response.json();\n            setWrittenWorkData(data.data);\n        } catch (err) {\n            console.log(err)\n        }\n\n    }\n    const selectedGenreHandler = async (e) => {\n        let push = true;\n        selectedGenre.forEach(genre => {\n            if (genre === e.target.textContent) {\n                push = false;\n            }\n        })\n        if (push) {\n            selectedGenre.push(e.target.textContent)\n            setSelectedGenre(selectedGenre)\n            if (!selectedWrittenwork.length) {\n                setQuery(`api/v1/writtenWork?genre[in]=${selectedGenre}`);\n            }\n            else {\n                setQuery(`api/v1/writtenWork?genre[in]=${selectedGenre}&workType[in]=${selectedWrittenwork}`)\n            }\n        }\n    }\n    const selectedWrittenworkHandler = async (e) => {\n        let push = true;\n        selectedWrittenwork.forEach(workType => {\n            if (workType === e.target.textContent) {\n                push = false;\n            }\n        })\n        if (push) {\n            selectedWrittenwork.push(e.target.textContent)\n            setSelectedWrittenwork(selectedWrittenwork)\n        }\n        if (!selectedGenre.length) {\n            setQuery(`api/v1/writtenWork?workType[in]=${selectedWrittenwork}`);\n        }\n        else {\n            setQuery(`api/v1/writtenWork?genre[in]=${selectedGenre}&workType[in]=${selectedWrittenwork}`)\n        }\n    }\n    const removeWrittenWorkHandler = (idx) => {\n        let newSelectedWritten = selectedWrittenwork.filter((workType, id) => id !== idx);\n        setSelectedWrittenwork(newSelectedWritten);\n        updateQuery(newSelectedWritten, selectedGenre);\n    }\n    const removeGenreHandler = (e) => {\n        let newSelectedGenre = selectedGenre.filter(genre => genre !== e.target.textContent.trim());\n        setSelectedGenre(newSelectedGenre);\n        updateQuery(selectedWrittenwork, newSelectedGenre);\n    }\n    function updateQuery(selectedTagList, selectedGenreList) {\n        if (!selectedGenreList.length && !selectedTagList.length) {\n            setQuery(`api/v1/writtenWork`);\n        }\n        else if (!selectedGenreList.length && selectedTagList.length > 0) {\n            setQuery(`api/v1/writtenWork?workType[in]=${selectedTagList}`)\n        }\n        else if (!selectedTagList.length && selectedGenreList.length > 0) {\n            setQuery(`api/v1/writtenWork?genre[in]=${selectedGenreList}`);\n        }\n        else {\n            setQuery(`api/v1/writtenWork?genre[in]=${selectedGenreList}&workType[in]=${selectedTagList}`)\n        }\n    }\n    return (\n        <div>\n            {!isLoggedIn ? <Redirect to=\"/read\" /> : \"\"}\n            <div className=\"header\">\n                <div className=\"section\">\n                    <div className=\"tagsArea\">\n                        {selectedWrittenwork.map((workType, idx) => <div key={workType} onClick={() => removeWrittenWorkHandler(idx)} className=\"tags\">{workType} <img src={cross} alt=\"Cancel\" /> </div>)}\n                        {selectedGenre.map(genre => <div key={genre} onClick={removeGenreHandler} className=\"tags\">{genre} <img src={cross} alt=\"Cancel\" /> </div>)}\n                    </div>\n                </div>\n                <div className=\"section\">\n                    <div className=\"dropdown\">\n                        <div className=\"title\" onClick={() => {\n                            setIsGenreOpen(!isGenreOpen);\n                            setIsWorkOpen(false)\n                        }}>Genre\n                        <img src={arrow} alt=\"arrow\" className={isGenreOpen ? \"rotateDown\" : \"\"} />\n                        </div>\n                        <ul onClick={selectedGenreHandler} className={`options ${isGenreOpen ? \"expand\" : \"\"}`}>\n                            <li>Fantasy</li>\n                            <li>Adventure</li>\n                            <li>Romance</li>\n                            <li>Contemporary</li>\n                            <li>Dystopian</li>\n                            <li>Mystery</li>\n                            <li>Horror</li>\n                            <li>Thriller</li>\n                            <li>Paranormal</li>\n                            <li>Historical fiction</li>\n                            <li>Science Fiction</li>\n                            <li>Memoir</li>\n                            <li>Self-help / Personal</li>\n                            <li>Motivational</li>\n                            <li>Guide / How-to</li>\n                            <li>Humor</li>\n                            <li>Children’s</li>\n                            <li>Other</li>\n\n                        </ul>\n                    </div>\n                    <div className=\"dropdown\">\n                        <div className=\"title\" onClick={() => {\n                            setIsWorkOpen(!isWorkOpen);\n                            setIsGenreOpen(false);\n                        }}>Work Type\n                        <img src={arrow} alt=\"arrow\" className={isWorkOpen ? \"rotateDown\" : \"\"} />\n                        </div>\n                        <ul onClick={selectedWrittenworkHandler} className={`options ${isWorkOpen ? \"expand\" : \"\"}`}>\n                            <li>Poetry</li>\n                            <li>Short Story</li>\n                            <li>Novel</li>\n                            <li>Journal/Diary</li>\n                            <li>Quotes</li>\n                        </ul>\n                    </div>\n\n                </div>\n            </div>\n            <div className=\"cardsSection\">\n                {\n                    writtenWorkData.map(writtenWork => { return <Card key={writtenWork._id} id={writtenWork._id} name={writtenWork.name} author={`${writtenWork.author.firstName} ${writtenWork.author.lastName}`} photo={writtenWork.photo} description={writtenWork.description} workType={writtenWork.workType} genre={writtenWork.genre} nsfw={writtenWork.nsfwContent} violence={writtenWork.violence} triggerWarning={writtenWork.suicideOrTriggerWarning} /> })\n                }\n            </div>\n        </div >\n    )\n}\n\nexport default Read","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Home.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Resetpassword.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/Messages.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/LoggedIn.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/NotLoggedIn.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/Profile.js",["84","85"],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/Card.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/ReadWrittenWork.js",["86"],"import React, { useEffect, useState, useRef } from 'react'\nimport { useParams } from 'react-router';\nimport profilePlaceholder from '../images/profilePlaceholder.svg';\nimport expand from '../images/expand.svg';\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport emptyStar from '../images/empty_star.svg';\nimport filledStar from '../images/filled_star.svg';\nimport about from '../images/about.svg';\nimport Error from '../components/Error';\nimport { useHistory } from 'react-router-dom'\n\n\nfunction ReadWrittenWork({ isLoggedIn }) {\n    const { id } = useParams();\n    const history = useHistory()\n\n    const [writtenWorkData, setWrittenWorkData] = useState([]);\n    const [query, setQuery] = useState(`/api/v1/writtenWork/${id}`);\n    const [userRating, setUserRating] = useState([0, 0, 0, 0, 0]);\n    const [errors, setErrors] = useState(\"\");\n\n    const handle = useFullScreenHandle();\n    useEffect(() => {\n        loadWrittenWork();\n    }, [query])\n    const commentRef = useRef();\n    const loadWrittenWork = async () => {\n        try {\n            const response = await fetch(query)\n            const data = await response.json();\n            setWrittenWorkData(data.data);\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    const submitCommentHandler = async () => {\n        if (isLoggedIn) {\n            if (commentRef.current.value.length) {\n                try {\n                    const response = await fetch(`/api/v1/writtenWork/${id}/comments`, {\n                        method: \"POST\",\n                        body: JSON.stringify({\n                            comment: commentRef.current.value\n                        }),\n                        headers: {\n                            \"Content-type\": \"application/json; charset=UTF-8\"\n                        }\n                    })\n                    const data = await response.json();\n                    setErrors(\"\");\n                    if (data.success) {\n                        setQuery(query)\n                    }\n                    else {\n                        setErrors(data.error)\n                    }\n\n                } catch (err) {\n                    setErrors(err)\n                }\n            }\n            else {\n                setErrors(\"Comments can't be empty\")\n            }\n            commentRef.current.value = \"\"\n        }\n        else {\n            history.push(\"/login\");\n        }\n    }\n    const submitReviewHandler = async (rating) => {\n        if (isLoggedIn) {\n            try {\n                const response = await fetch(`/api/v1/writtenWork/${id}/comments`, {\n                    method: \"POST\",\n                    body: JSON.stringify({\n                        rating: rating\n                    }),\n                    headers: {\n                        \"Content-type\": \"application/json; charset=UTF-8\"\n                    }\n                })\n                const data = await response.json();\n                if (data.success) {\n                    // setQuery(`/api/v1/writtenWork/${}`)\n                }\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            history.push(\"/login\");\n        }\n    }\n    const mouseOverStar = (index) => {\n        for (let i = 0; i < 5; i++) {\n            if (i <= index) {\n                userRating[i] = 1;\n            }\n            else {\n                userRating[i] = 0;\n            }\n        }\n        setUserRating(userRating)\n    }\n\n    const starRenderer = () => {\n        let ratingRenderer = [];\n        for (let i = 0; i < 5; i++) {\n            if (i < Math.round(parseInt(writtenWorkData.averageRating))) {\n                ratingRenderer.push(<img key={i} src={filledStar} alt=\"filled star\" />)\n            }\n            else {\n                ratingRenderer.push(<img key={i} src={emptyStar} alt=\"empty star\" />)\n            }\n        }\n        return ratingRenderer;\n    }\n    return (\n        <>\n            {\n                writtenWorkData.author && writtenWorkData.genre && writtenWorkData.comments && < div className=\"readWrittenWork\">\n                    <div className=\"readSection\">\n                        <div className=\"heading\">\n                            <h1>{writtenWorkData.name}</h1>\n                            <div className=\"options\">\n                                <div onClick={handle.enter} className=\"fullscreen\">\n                                    <img src={expand} alt=\"expand\" /> Fullscreen\n                                </div>\n                                <div onClick={handle.enter} className=\"fullscreen\">\n                                    <img src={about} alt=\"expand\" /> About\n                                </div>\n                            </div>\n                        </div>\n                        <FullScreen handle={handle} style={{ color: '#fff' }}>\n                            <textarea className=\"readArea\" readOnly>\n                                {writtenWorkData.content}\n                            </textarea>\n                        </FullScreen>\n                    </div>\n                    <div className=\"description\">\n                        <div className=\"padding\">\n                            <h1>{writtenWorkData.name}</h1>\n                            <h2>{writtenWorkData.author.firstName} {writtenWorkData.author.lastName}</h2>\n                            <div className=\"tagsArea\">\n                                <div className=\"tags\">{writtenWorkData.workType}</div>\n                                {writtenWorkData.genre.map(gen => <div key={gen} className=\"tags\">{gen}</div>)}\n                            </div>\n                            <p>{writtenWorkData.description} </p>\n                            <div className=\"rating\">\n                                <div className=\"stars\">\n                                    {starRenderer()}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"comments\">\n\n                            <div className=\"padding\">\n                                <h1>Comments</h1>\n                                {writtenWorkData.comments.map(comment => {\n                                    if (comment.comment) {\n                                        return <div key={comment._id} className=\"comment\">\n                                            <div className=\"commentName\">\n                                                <img src={profilePlaceholder} alt=\"Profile\" />\n                                                {comment.user.firstName} {comment.user.lastName}\n                                            </div>\n                                            <div className=\"commentDesc\">\n                                                {comment.comment}\n                                            </div>\n                                        </div>\n                                    }\n                                    return \"\";\n                                }\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"userInputSection\">\n                            <Error error={errors} />\n                            <div className=\"borderInput\">\n                                <input type=\"text\" placeholder=\"Leave A Comment\" ref={commentRef} />\n                                <div onClick={submitCommentHandler}>Post</div>\n                            </div>\n\n                            <div className=\"inputRating\">\n                                <span>Leave A Rating:</span>\n\n                                {userRating.map((rating, i) =>\n                                    <img onClick={() => submitReviewHandler(i + 1)}\n                                        onMouseOver={() => mouseOverStar(i)} key={i} src={rating ? filledStar : emptyStar}\n                                        alt=\"empty star\" />)\n                                }\n                            </div>\n                        </div>\n\n                    </div>\n                </div>}\n        </>\n    )\n}\n\n\nexport default ReadWrittenWork\n","/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/components/CardAuthor.js",[],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/EditWrittenwork.js",["87","88","89","90","91","92","93","94","95"],"/Users/jaishreebala/Desktop/Writers Cafe Test/Writers-Cafe-API/client/src/pages/CreateWrittenwork.js",["96"],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":15,"column":8,"nodeType":"103","endLine":15,"endColumn":15,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":8,"column":19,"nodeType":"107","messageId":"108","endLine":8,"endColumn":27},{"ruleId":"101","severity":1,"message":"109","line":13,"column":8,"nodeType":"103","endLine":13,"endColumn":15,"suggestions":"110"},{"ruleId":"101","severity":1,"message":"111","line":25,"column":8,"nodeType":"103","endLine":25,"endColumn":15,"suggestions":"112"},{"ruleId":"105","severity":1,"message":"113","line":11,"column":8,"nodeType":"107","messageId":"108","endLine":11,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":15,"column":19,"nodeType":"107","messageId":"108","endLine":15,"endColumn":27},{"ruleId":"114","severity":1,"message":"115","line":27,"column":26,"nodeType":"116","messageId":"117","endLine":27,"endColumn":28},{"ruleId":"101","severity":1,"message":"118","line":45,"column":8,"nodeType":"103","endLine":45,"endColumn":14,"suggestions":"119"},{"ruleId":"114","severity":1,"message":"115","line":48,"column":30,"nodeType":"116","messageId":"117","endLine":48,"endColumn":32},{"ruleId":"101","severity":1,"message":"120","line":66,"column":8,"nodeType":"103","endLine":66,"endColumn":18,"suggestions":"121"},{"ruleId":"105","severity":1,"message":"122","line":67,"column":13,"nodeType":"107","messageId":"108","endLine":67,"endColumn":23},{"ruleId":"105","severity":1,"message":"123","line":67,"column":25,"nodeType":"107","messageId":"108","endLine":67,"endColumn":40},{"ruleId":"101","severity":1,"message":"111","line":78,"column":8,"nodeType":"103","endLine":78,"endColumn":15,"suggestions":"124"},{"ruleId":"105","severity":1,"message":"125","line":13,"column":11,"nodeType":"107","messageId":"108","endLine":13,"endColumn":21},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'readWrittenWorkHandler'. Either include it or remove the dependency array.","ArrayExpression",["128"],"no-unused-vars","'setQuery' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getMyProfileHandler'. Either include it or remove the dependency array.",["129"],"React Hook useEffect has a missing dependency: 'loadWrittenWork'. Either include it or remove the dependency array.",["130"],"'SpeechRecognition' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'id' and 'lastText'. Either include them or remove the dependency array.",["131"],"React Hook useEffect has missing dependencies: 'id' and 'lastDescText'. Either include them or remove the dependency array.",["132"],"'transcript' is assigned a value but never used.","'resetTranscript' is assigned a value but never used.",["133"],"'visibility' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"138","fix":"144"},"Update the dependencies array to be: [query, readWrittenWorkHandler]",{"range":"145","text":"146"},"Update the dependencies array to be: [getMyProfileHandler, query]",{"range":"147","text":"148"},"Update the dependencies array to be: [loadWrittenWork, query]",{"range":"149","text":"150"},"Update the dependencies array to be: [id, lastText, text]",{"range":"151","text":"152"},"Update the dependencies array to be: [descText, id, lastDescText]",{"range":"153","text":"154"},{"range":"155","text":"150"},[683,690],"[query, readWrittenWorkHandler]",[443,450],"[getMyProfileHandler, query]",[966,973],"[loadWrittenWork, query]",[1833,1839],"[id, lastText, text]",[2589,2599],"[descText, id, lastDescText]",[2997,3004]]